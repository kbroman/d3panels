"use strict";

// Generated by CoffeeScript 2.6.1
(function () {
  // illustration of use of the scatterplot function
  var h, halfh, halfw, margin, totalh, totalw, w;
  h = 380;
  w = 500;
  margin = {
    left: 60,
    top: 40,
    right: 40,
    bottom: 40,
    inner: 5
  };
  halfh = h + margin.top + margin.bottom;
  totalh = halfh * 2;
  halfw = w + margin.left + margin.right;
  totalw = halfw * 2; // Example 1: simplest use

  d3.json("data.json").then(function (data) {
    var d, mychart, these_data;
    mychart = d3panels.scatterplot({
      xlab: "X1",
      ylab: "X2",
      height: h,
      width: w,
      pointsize: 3,
      margin: margin
    }); // reorg data

    these_data = {
      x: function () {
        var k, len, results;
        results = [];

        for (k = 0, len = data.length; k < len; k++) {
          d = data[k];
          results.push(d[0]);
        }

        return results;
      }(),
      y: function () {
        var k, len, results;
        results = [];

        for (k = 0, len = data.length; k < len; k++) {
          d = data[k];
          results.push(d[1]);
        }

        return results;
      }()
    }; // make plot

    mychart(d3.select("div#chart1"), these_data); // animate points

    return mychart.points().on("mouseover", function () {
      return d3.select(this).attr("r", 3 * 3);
    }).on("mouseout", function () {
      return d3.select(this).attr("r", 3);
    });
  }); // Example 2: three scatterplots within one SVG, with brushing

  d3.json("data.json").then(function (data) {
    var brush, brushend, brushmove, brushstart, chart, d, i, k, mychart, svg, these_data, xscale, xshift, xvar, yscale, yshift, yvar;
    xvar = [1, 2, 2];
    yvar = [0, 0, 1];
    xshift = [0, halfw, halfw];
    yshift = [0, 0, halfh];
    svg = d3.select("div#chart2").append("svg").attr("class", "d3panels").attr("height", totalh).attr("width", totalw);
    mychart = [];
    chart = [];

    for (i = k = 0; k <= 2; i = ++k) {
      mychart[i] = d3panels.scatterplot({
        nxticks: 6,
        height: h,
        width: w,
        margin: margin,
        xlab: "X" + (xvar[i] + 1),
        ylab: "X" + (yvar[i] + 1),
        title: "X" + (yvar[i] + 1) + " vs. X" + (xvar[i] + 1)
      });
      chart[i] = svg.append("g").attr("id", "chart" + i).attr("transform", "translate(" + xshift[i] + "," + yshift[i] + ")");
      these_data = {
        x: function () {
          var l, len, results;
          results = [];

          for (l = 0, len = data.length; l < len; l++) {
            d = data[l];
            results.push(d[xvar[i]]);
          }

          return results;
        }(),
        y: function () {
          var l, len, results;
          results = [];

          for (l = 0, len = data.length; l < len; l++) {
            d = data[l];
            results.push(d[yvar[i]]);
          }

          return results;
        }()
      };
      mychart[i](chart[i], these_data);
    }

    brushstart = function brushstart() {
      return svg.selectAll("circle").attr("opacity", 0.6).classed("selected", false);
    };

    brushmove = function brushmove(event, d) {
      var e;
      svg.selectAll("circle").classed("selected", false);
      e = event.selection;
      return [0, 1, 2].map(function (i) {
        var e_rescaled;

        if (e[0][0] <= xshift[i] + w && e[1][0] >= xshift[i] && e[0][1] <= yshift[i] + h && e[1][1] >= yshift[i]) {
          e_rescaled = [[0, 0], [0, 0]];
          [0, 1].map(function (j) {
            e_rescaled[j][0] = xscale.invert(e[j][0] - xshift[i]);
            return e_rescaled[j][1] = yscale.invert(e[j][1] - yshift[i]);
          });
          return chart[i].selectAll("circle").classed("selected", function (d, j) {
            var circ, cx, cy, selected;
            circ = d3.select(this);
            cx = circ.attr("cx");
            cy = circ.attr("cy");
            selected = e_rescaled[0][0] <= cx && cx <= e_rescaled[1][0] && e_rescaled[0][1] <= cy && cy <= e_rescaled[1][1];

            if (selected) {
              svg.selectAll("circle.pt" + j).classed("selected", true);
            }

            return selected;
          });
        }
      });
    };

    brushend = function brushend() {
      return svg.selectAll("circle").attr("opacity", 1);
    };

    xscale = d3.scaleLinear().domain([margin.left, margin.left + w]).range([margin.left, margin.left + w]);
    yscale = d3.scaleLinear().domain([margin.top, margin.top + h]).range([margin.top, margin.top + h]);
    brush = d3.brush().extent([[0, 0], [totalw, totalh]]).on("start", brushstart).on("brush", brushmove).on("end", brushend);
    return svg.call(brush);
  }); // Example 3: different options regarding treatment of missing values

  d3.json("data.json").then(function (data) {
    var chart01, chart02, chart12, d, mychart01, mychart02, mychart12, svg, these_data;
    mychart01 = d3panels.scatterplot({
      height: h,
      width: w,
      margin: margin,
      xlab: "X2",
      ylab: "X1",
      xNA: {
        handle: true,
        force: true
      },
      xNA_size: {
        width: 15,
        gap: 10
      },
      yNA: {
        handle: true,
        force: true
      },
      yNA_size: {
        width: 15,
        gap: 10
      },
      title: "X1 vs X2"
    });
    mychart02 = d3panels.scatterplot({
      height: h,
      width: w,
      margin: margin,
      xlab: "X3",
      ylab: "X1",
      xNA_size: {
        width: 15,
        gap: 10
      },
      yNA: {
        handle: true,
        force: true
      },
      yNA_size: {
        width: 15,
        gap: 10
      },
      title: "X1 vs X3"
    });
    mychart12 = d3panels.scatterplot({
      height: h,
      width: w,
      margin: margin,
      xlab: "X3",
      ylab: "X2",
      xNA: {
        handle: false,
        force: false
      },
      yNA_size: {
        width: 15,
        gap: 10
      },
      title: "X2 vs X3"
    });
    svg = d3.select("div#chart3").append("svg").attr("class", "d3panels").attr("height", totalh).attr("width", totalw);
    chart01 = svg.append("g").attr("id", "chart01");
    chart02 = svg.append("g").attr("id", "chart02").attr("transform", "translate(" + halfw + ", 0)");
    chart12 = svg.append("g").attr("id", "chart12").attr("transform", "translate(" + halfw + ", " + halfh + ")");
    these_data = {
      x: function () {
        var k, len, results;
        results = [];

        for (k = 0, len = data.length; k < len; k++) {
          d = data[k];
          results.push(d[1]);
        }

        return results;
      }(),
      y: function () {
        var k, len, results;
        results = [];

        for (k = 0, len = data.length; k < len; k++) {
          d = data[k];
          results.push(d[0]);
        }

        return results;
      }()
    };
    mychart01(chart01, these_data);
    these_data = {
      x: function () {
        var k, len, results;
        results = [];

        for (k = 0, len = data.length; k < len; k++) {
          d = data[k];
          results.push(d[2]);
        }

        return results;
      }(),
      y: function () {
        var k, len, results;
        results = [];

        for (k = 0, len = data.length; k < len; k++) {
          d = data[k];
          results.push(d[0]);
        }

        return results;
      }()
    };
    mychart02(chart02, these_data);
    these_data = {
      x: function () {
        var k, len, results;
        results = [];

        for (k = 0, len = data.length; k < len; k++) {
          d = data[k];
          results.push(d[2]);
        }

        return results;
      }(),
      y: function () {
        var k, len, results;
        results = [];

        for (k = 0, len = data.length; k < len; k++) {
          d = data[k];
          results.push(d[1]);
        }

        return results;
      }()
    };
    mychart12(chart12, these_data);
    return [mychart01, mychart02, mychart12].forEach(function (chart) {
      return chart.points().on("mouseover", function (d, i) {
        return svg.selectAll("circle.pt" + i).attr("r", 9);
      }).on("mouseout", function (d, i) {
        return svg.selectAll("circle.pt" + i).attr("r", 3);
      });
    });
  }); // Example 4: color by grouping

  d3.json("data.json").then(function (data) {
    var d, group, i, mychart, ngroup, these_data;
    mychart = d3panels.scatterplot({
      xlab: "X",
      ylab: "Y",
      height: h,
      width: w,
      margin: margin
    });
    ngroup = 3;

    group = function () {
      var k, len, results;
      results = [];

      for (k = 0, len = data.length; k < len; k++) {
        i = data[k];
        results.push(Math.ceil(Math.random() * ngroup));
      }

      return results;
    }();

    these_data = {
      x: function () {
        var k, len, results;
        results = [];

        for (k = 0, len = data.length; k < len; k++) {
          d = data[k];
          results.push(d[0]);
        }

        return results;
      }(),
      y: function () {
        var k, len, results;
        results = [];

        for (k = 0, len = data.length; k < len; k++) {
          d = data[k];
          results.push(d[1]);
        }

        return results;
      }(),
      group: group
    };

    for (i in these_data.y) {
      if (Math.random() < 0.1) {
        these_data.y[i] = null;
      }

      if (Math.random() < 0.1) {
        these_data.x[i] = null;
      }
    }

    mychart(d3.select("div#chart4"), these_data); // animate points

    return mychart.points().on("mouseover", function (d) {
      return d3.select(this).attr("r", 9);
    }).on("mouseout", function (d) {
      return d3.select(this).attr("r", 3);
    });
  });
}).call(undefined);